// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Patient/User model
model Patient {
  id          String   @id @default(uuid())
  name        String
  email       String?
  phone       String   @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relationships
  appointments Appointment[]
  
  @@map("patients")
}

// Service categories model
model ServiceCategory {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?
  active      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relationships
  services Service[]
  
  @@map("service_categories")
}

// Individual services/tests model
model Service {
  id          String   @id @default(uuid())
  name        String
  description String?
  price       Float?
  duration    Int?     // Duration in minutes
  preparation String?  // Special preparation instructions
  active      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relationships
  categoryId String
  category   ServiceCategory @relation(fields: [categoryId], references: [id])
  
  appointmentServices AppointmentService[]
  
  @@map("services")
}

// Appointment model
model Appointment {
  id                 String            @id @default(uuid())
  referenceNumber    String            @unique
  appointmentDate    DateTime
  appointmentTime    String
  status             AppointmentStatus @default(PENDING)
  additionalInfo     String?
  totalAmount        Float?
  paymentStatus      PaymentStatus     @default(PENDING)
  confirmationSentAt DateTime?
  reminderSentAt     DateTime?
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  
  // Relationships
  patientId String
  patient   Patient @relation(fields: [patientId], references: [id])
  
  appointmentServices AppointmentService[]
  
  @@map("appointments")
}

// Junction table for appointment and services (many-to-many)
model AppointmentService {
  id            String      @id @default(uuid())
  appointmentId String
  serviceId     String
  price         Float?
  completed     Boolean     @default(false)
  notes         String?
  createdAt     DateTime    @default(now())
  
  // Relationships
  appointment Appointment @relation(fields: [appointmentId], references: [id], onDelete: Cascade)
  service     Service     @relation(fields: [serviceId], references: [id])
  
  @@unique([appointmentId, serviceId])
  @@map("appointment_services")
}

// Operating hours model
model OperatingHours {
  id        String   @id @default(uuid())
  dayOfWeek Int      // 0 = Sunday, 1 = Monday, etc.
  openTime  String
  closeTime String
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@unique([dayOfWeek])
  @@map("operating_hours")
}

// Holiday/blocked dates model
model BlockedDate {
  id          String   @id @default(uuid())
  date        DateTime
  reason      String?
  allDay      Boolean  @default(true)
  startTime   String?
  endTime     String?
  active      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("blocked_dates")
}

// Admin users model
model Admin {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  name      String
  role      AdminRole @default(STAFF)
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("admins")
}

// Enums
enum AppointmentStatus {
  PENDING
  CONFIRMED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  NO_SHOW
}

enum PaymentStatus {
  PENDING
  PAID
  PARTIALLY_PAID
  REFUNDED
}

enum AdminRole {
  SUPER_ADMIN
  ADMIN
  STAFF
  DOCTOR
}